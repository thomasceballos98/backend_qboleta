generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = "5"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model events {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(255)
  created         DateTime      @db.DateTime(0)
  updated         DateTime?     @db.DateTime(0)
  event_date      DateTime      @db.DateTime(0)
  user_creator_id String?       @db.VarChar(50)
  country         String        @db.VarChar(255)
  state           String        @db.VarChar(255)
  city            String        @db.VarChar(255)
  location        String        @db.VarChar(255)
  active          Int           @default(1)
  event_type_id   Int?
  event_image     String?       @db.VarChar(300)
  users           users?        @relation(fields: [user_creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_creator")
  events_type     events_types? @relation(fields: [event_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_type")
  tickets         tickets[]

  @@index([user_creator_id], map: "user_id_idx")
  @@index([event_type_id], map: "event_type")
}

model tickets {
  id             Int           @id @default(autoincrement())
  ticket_type_id Int
  user_owner_id  String        @db.VarChar(50)
  event_id       Int
  tickets_qty    Int
  price          Float
  active         Int           @default(1)
  description    String?       @db.VarChar(255)
  is_reported    Int           @default(0)
  events         events        @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ticket_event")
  users          users         @relation(fields: [user_owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_owner_id")
  ticket_type    tickets_types @relation(fields: [ticket_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tickets_ibfk_1")

  @@index([event_id], map: "event_id_idx")
  @@index([user_owner_id], map: "user_id_idx")
  @@index([ticket_type_id], map: "ticket_type")
}

model users {
  id              String    @id @unique(map: "id_UNIQUE") @db.VarChar(50)
  name            String    @db.VarChar(50)
  email           String    @db.VarChar(50)
  phone           String    @db.VarChar(50)
  country_phone   String    @db.VarChar(45)
  document_number String    @unique(map: "document_number_UNIQUE") @db.VarChar(50)
  is_verified     Int?      @default(0)
  rating          Int?      @default(0)
  qty_sold        Int?      @default(0)
  active          Int       @default(1)
  is_reported     Int       @default(0)
  events          events[]
  tickets         tickets[]
}

model events_types {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(45)
  description String?  @db.VarChar(255)
  active      Int      @default(1)
  events      events[]
}

model tickets_types {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?   @db.VarChar(255)
  active      Int       @default(1)
  tickets     tickets[]
}

model registro {
  id               Int       @id @default(autoincrement())
  fecha_hora       DateTime? @default(now()) @db.DateTime(0)
  mensaje_recibido String?   @default("") @db.VarChar(1000)
  mensaje_enviado  String?   @default("") @db.VarChar(1000)
  id_wa            String?   @default("") @db.VarChar(1000)
  timestamp_wa     Int?
  telefono_wa      String?   @default("") @db.VarChar(50)
}
